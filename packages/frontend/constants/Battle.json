{
  "address": "0x27799d1336b7e66c115CA0Bb6B331c9fD2248f7c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId2",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "winner",
          "type": "uint256"
        }
      ],
      "name": "BattleCommenced",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accountImplementation",
      "outputs": [
        {
          "internalType": "contract IERC6551Account",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "avatarContract",
      "outputs": [
        {
          "internalType": "contract IBGAvatars",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId2",
          "type": "uint256"
        }
      ],
      "name": "battle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_avatarContract",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_accountImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IERC6551Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2f334ca679eea3e7eda8db77c10ea85dcae0fc5fcb0b16cfb84f9dbe1133569",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x27799d1336b7e66c115CA0Bb6B331c9fD2248f7c",
    "transactionIndex": 9,
    "gasUsed": "683351",
    "logsBloom": "0x
    "blockHash": "0x8a6aa3fb86a0445da419db342b324709f9fd566de5492698f94617b04ef0dbc2",
    "transactionHash": "0xa2f334ca679eea3e7eda8db77c10ea85dcae0fc5fcb0b16cfb84f9dbe1133569",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 41117167,
        "transactionHash": "0xa2f334ca679eea3e7eda8db77c10ea85dcae0fc5fcb0b16cfb84f9dbe1133569",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003a441946af90000000000000000000000000000000000000000000000000f88011b0009663d880000000000000000000000000000000000000000000034cc04ec77337a3ab12e00000000000000000000000000000000000000000000000f87fd76be74fb44880000000000000000000000000000000000000000000034cc04f01b750ea5aa2e",
        "logIndex": 30,
        "blockHash": "0x8a6aa3fb86a0445da419db342b324709f9fd566de5492698f94617b04ef0dbc2"
      }
    ],
    "blockNumber": 41117167,
    "cumulativeGasUsed": "2250842",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "de26ddf003584f2efceb651fc72ea40e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"}],\"name\":\"BattleCommenced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contract IERC6551Account\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avatarContract\",\"outputs\":[{\"internalType\":\"contract IBGAvatars\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"}],\"name\":\"battle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_avatarContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_accountImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IERC6551Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Battle.sol\":\"Battle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Battle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './interfaces/IBGAvatars.sol';\\nimport './interfaces/IERC6551Account.sol';\\nimport './interfaces/IERC6551Custom.sol';\\nimport './interfaces/IERC6551Registry.sol';\\n\\ncontract Battle {\\n    IBGAvatars public avatarContract;\\n    IERC6551Account public accountImplementation;\\n    IERC6551Registry public registry;\\n\\n    event BattleCommenced(\\n        uint256 indexed tokenId1,\\n        uint256 indexed tokenId2,\\n        uint256 indexed winner\\n    );\\n\\n    function initialize(\\n        address _avatarContract,\\n        address payable _accountImplementation,\\n        address _registry\\n    ) external {\\n        avatarContract = IBGAvatars(_avatarContract);\\n        accountImplementation = IERC6551Account(_accountImplementation);\\n        registry = IERC6551Registry(_registry);\\n    }\\n\\n    function battle(uint256 tokenId1, uint256 tokenId2) external {\\n        address account1 = registry.account(\\n            address(accountImplementation),\\n            block.chainid,\\n            address(avatarContract),\\n            tokenId1,\\n            tokenId1\\n        );\\n        address account2 = registry.account(\\n            address(accountImplementation),\\n            block.chainid,\\n            address(avatarContract),\\n            tokenId2,\\n            tokenId2\\n        );\\n        // generate two random different numbers\\n        uint256 player1Roll = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, tokenId1)\\n            )\\n        ) % 100000;\\n\\n        uint256 player2Roll = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, tokenId2)\\n            )\\n        ) % 100000;\\n\\n        if (player1Roll > player2Roll) {\\n            avatarContract.battleBurn(tokenId2);\\n            IERC6551Custom(account1).increaseExperience(10);\\n            emit BattleCommenced(tokenId1, tokenId2, tokenId1);\\n        } else if (player1Roll < player2Roll) {\\n            avatarContract.battleBurn(tokenId1);\\n            IERC6551Custom(account2).increaseExperience(10);\\n            emit BattleCommenced(tokenId1, tokenId2, tokenId2);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd69dc8fb4715bfdb271785f304f8199e17383511c92dee8af87bbf1622f3dd8f\",\"license\":\"MIT\"},\"contracts/interfaces/IBGAvatars.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface IBGAvatars is IERC721 {\\n    function getOwnedTokens(\\n        address owner\\n    ) external view returns (uint256[] memory);\\n\\n    function battleBurn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xf11f7dd2c6ec07f37881a58efa4ba20b6a8902bc1b0f365a00bf0c331807381b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC6551Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x6faff5f1`\\ninterface IERC6551Account {\\n    /**\\n     * @dev Allows the account to receive Ether\\n     *\\n     * Accounts MUST implement a `receive` function.\\n     *\\n     * Accounts MAY perform arbitrary logic to restrict conditions\\n     * under which Ether can be received.\\n     */\\n    receive() external payable;\\n\\n    /**\\n     * @dev Returns the identifier of the non-fungible token which owns the account\\n     *\\n     * The return value of this function MUST be constant - it MUST NOT change\\n     * over time\\n     *\\n     * @return chainId       The EIP-155 ID of the chain the token exists on\\n     * @return tokenContract The contract address of the token\\n     * @return tokenId       The ID of the token\\n     */\\n    function token()\\n        external\\n        view\\n        returns (uint256 chainId, address tokenContract, uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a value that SHOULD be modified each time the account changes state\\n     *\\n     * @return The current account state\\n     */\\n    function state() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a magic value indicating whether a given signer is authorized to act on behalf of the account\\n     *\\n     * MUST return the bytes4 magic value 0x523e3260 if the given signer is valid\\n     *\\n     * By default, the holder of the non-fungible token the account is bound to MUST be considered a valid\\n     * signer\\n     *\\n     * Accounts MAY implement additional authorization logic which invalidates the holder as a\\n     * signer or grants signing permissions to other non-holder accounts\\n     *\\n     * @param  signer     The address to check signing authorization for\\n     * @param  context    Additional data used to determine whether the signer is valid\\n     * @return magicValue Magic value indicating whether the signer is valid\\n     */\\n    function isValidSigner(\\n        address signer,\\n        bytes calldata context\\n    ) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x31f1abcd707133d626c3372c60cf12fc2e72d373912e886f8d23fd1185401540\",\"license\":\"MIT\"},\"contracts/interfaces/IERC6551Custom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC6551Custom {\\n    function increaseExperience(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5129a54826a2835eb0ea2a8f11598834267b2bc74f46959ac37717c2e8d8bde6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry SHALL emit the AccountCreated event upon successful account creation\\n     */\\n    event AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId,\\n        uint256 salt\\n    );\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token\\n     *\\n     * If account has already been created, returns the account address without calling create2\\n     *\\n     * If initData is not empty and account has not yet been created, calls account with\\n     * provided initData after creation\\n     *\\n     * Emits AccountCreated event\\n     *\\n     * @return the address of the account\\n     */\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 seed,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token\\n     *\\n     * @return The computed address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb83e368572223fc671cda1285eefb4ac00cbb429ad17b0b9f6e4e53a43328525\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b6a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806311464fbe1461005c5780632a0c52211461007a57806345f0791d146100965780637b103999146100b4578063c0c53b8b146100d2575b600080fd5b6100646100ee565b6040516100719190610763565b60405180910390f35b610094600480360381019061008f91906107b9565b610114565b005b61009e6105d3565b6040516100ab919061082c565b60405180910390f35b6100bc6105f7565b6040516100c99190610868565b60405180910390f35b6100ec60048036038101906100e791906108ff565b61061d565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9bc536600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff164660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687886040518663ffffffff1660e01b81526004016101bb959493929190610970565b602060405180830381865afa1580156101d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fc91906109d8565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9bc536600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff164660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687886040518663ffffffff1660e01b81526004016102a5959493929190610970565b602060405180830381865afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e691906109d8565b90506000620186a042448760405160200161030393929190610a26565b6040516020818303038152906040528051906020012060001c6103269190610a92565b90506000620186a042448760405160200161034393929190610a26565b6040516020818303038152906040528051906020012060001c6103669190610a92565b90508082111561049b5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ae6aff866040518263ffffffff1660e01b81526004016103c99190610ac3565b600060405180830381600087803b1580156103e357600080fd5b505af11580156103f7573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663ac09de4f600a6040518263ffffffff1660e01b81526004016104359190610b19565b600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b505050508585877f33515132930854e3a6ed49dc7eb3159be8d1c21905ebcbc6ab9ae972e728885960405160405180910390a46105cb565b808210156105ca5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ae6aff876040518263ffffffff1660e01b81526004016104fc9190610ac3565b600060405180830381600087803b15801561051657600080fd5b505af115801561052a573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663ac09de4f600a6040518263ffffffff1660e01b81526004016105689190610b19565b600060405180830381600087803b15801561058257600080fd5b505af1158015610596573d6000803e3d6000fd5b505050508485877f33515132930854e3a6ed49dc7eb3159be8d1c21905ebcbc6ab9ae972e728885960405160405180910390a45b5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061072961072461071f846106e4565b610704565b6106e4565b9050919050565b600061073b8261070e565b9050919050565b600061074d82610730565b9050919050565b61075d81610742565b82525050565b60006020820190506107786000830184610754565b92915050565b600080fd5b6000819050919050565b61079681610783565b81146107a157600080fd5b50565b6000813590506107b38161078d565b92915050565b600080604083850312156107d0576107cf61077e565b5b60006107de858286016107a4565b92505060206107ef858286016107a4565b9150509250929050565b60006108048261070e565b9050919050565b6000610816826107f9565b9050919050565b6108268161080b565b82525050565b6000602082019050610841600083018461081d565b92915050565b6000610852826107f9565b9050919050565b61086281610847565b82525050565b600060208201905061087d6000830184610859565b92915050565b600061088e826106e4565b9050919050565b61089e81610883565b81146108a957600080fd5b50565b6000813590506108bb81610895565b92915050565b60006108cc826106e4565b9050919050565b6108dc816108c1565b81146108e757600080fd5b50565b6000813590506108f9816108d3565b92915050565b6000806000606084860312156109185761091761077e565b5b6000610926868287016108ac565b9350506020610937868287016108ea565b9250506040610948868287016108ac565b9150509250925092565b61095b81610883565b82525050565b61096a81610783565b82525050565b600060a0820190506109856000830188610952565b6109926020830187610961565b61099f6040830186610952565b6109ac6060830185610961565b6109b96080830184610961565b9695505050505050565b6000815190506109d281610895565b92915050565b6000602082840312156109ee576109ed61077e565b5b60006109fc848285016109c3565b91505092915050565b6000819050919050565b610a20610a1b82610783565b610a05565b82525050565b6000610a328286610a0f565b602082019150610a428285610a0f565b602082019150610a528284610a0f565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a9d82610783565b9150610aa883610783565b925082610ab857610ab7610a63565b5b828206905092915050565b6000602082019050610ad86000830184610961565b92915050565b6000819050919050565b6000610b03610afe610af984610ade565b610704565b610783565b9050919050565b610b1381610ae8565b82525050565b6000602082019050610b2e6000830184610b0a565b9291505056fea2646970667358221220a17cbecfeafc151454e975a72612a0d7fcb7fd3fe01ce17ff499ecc717fef87264736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806311464fbe1461005c5780632a0c52211461007a57806345f0791d146100965780637b103999146100b4578063c0c53b8b146100d2575b600080fd5b6100646100ee565b6040516100719190610763565b60405180910390f35b610094600480360381019061008f91906107b9565b610114565b005b61009e6105d3565b6040516100ab919061082c565b60405180910390f35b6100bc6105f7565b6040516100c99190610868565b60405180910390f35b6100ec60048036038101906100e791906108ff565b61061d565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9bc536600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff164660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687886040518663ffffffff1660e01b81526004016101bb959493929190610970565b602060405180830381865afa1580156101d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fc91906109d8565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9bc536600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff164660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687886040518663ffffffff1660e01b81526004016102a5959493929190610970565b602060405180830381865afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e691906109d8565b90506000620186a042448760405160200161030393929190610a26565b6040516020818303038152906040528051906020012060001c6103269190610a92565b90506000620186a042448760405160200161034393929190610a26565b6040516020818303038152906040528051906020012060001c6103669190610a92565b90508082111561049b5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ae6aff866040518263ffffffff1660e01b81526004016103c99190610ac3565b600060405180830381600087803b1580156103e357600080fd5b505af11580156103f7573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663ac09de4f600a6040518263ffffffff1660e01b81526004016104359190610b19565b600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b505050508585877f33515132930854e3a6ed49dc7eb3159be8d1c21905ebcbc6ab9ae972e728885960405160405180910390a46105cb565b808210156105ca5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ae6aff876040518263ffffffff1660e01b81526004016104fc9190610ac3565b600060405180830381600087803b15801561051657600080fd5b505af115801561052a573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663ac09de4f600a6040518263ffffffff1660e01b81526004016105689190610b19565b600060405180830381600087803b15801561058257600080fd5b505af1158015610596573d6000803e3d6000fd5b505050508485877f33515132930854e3a6ed49dc7eb3159be8d1c21905ebcbc6ab9ae972e728885960405160405180910390a45b5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061072961072461071f846106e4565b610704565b6106e4565b9050919050565b600061073b8261070e565b9050919050565b600061074d82610730565b9050919050565b61075d81610742565b82525050565b60006020820190506107786000830184610754565b92915050565b600080fd5b6000819050919050565b61079681610783565b81146107a157600080fd5b50565b6000813590506107b38161078d565b92915050565b600080604083850312156107d0576107cf61077e565b5b60006107de858286016107a4565b92505060206107ef858286016107a4565b9150509250929050565b60006108048261070e565b9050919050565b6000610816826107f9565b9050919050565b6108268161080b565b82525050565b6000602082019050610841600083018461081d565b92915050565b6000610852826107f9565b9050919050565b61086281610847565b82525050565b600060208201905061087d6000830184610859565b92915050565b600061088e826106e4565b9050919050565b61089e81610883565b81146108a957600080fd5b50565b6000813590506108bb81610895565b92915050565b60006108cc826106e4565b9050919050565b6108dc816108c1565b81146108e757600080fd5b50565b6000813590506108f9816108d3565b92915050565b6000806000606084860312156109185761091761077e565b5b6000610926868287016108ac565b9350506020610937868287016108ea565b9250506040610948868287016108ac565b9150509250925092565b61095b81610883565b82525050565b61096a81610783565b82525050565b600060a0820190506109856000830188610952565b6109926020830187610961565b61099f6040830186610952565b6109ac6060830185610961565b6109b96080830184610961565b9695505050505050565b6000815190506109d281610895565b92915050565b6000602082840312156109ee576109ed61077e565b5b60006109fc848285016109c3565b91505092915050565b6000819050919050565b610a20610a1b82610783565b610a05565b82525050565b6000610a328286610a0f565b602082019150610a428285610a0f565b602082019150610a528284610a0f565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a9d82610783565b9150610aa883610783565b925082610ab857610ab7610a63565b5b828206905092915050565b6000602082019050610ad86000830184610961565b92915050565b6000819050919050565b6000610b03610afe610af984610ade565b610704565b610783565b9050919050565b610b1381610ae8565b82525050565b6000602082019050610b2e6000830184610b0a565b9291505056fea2646970667358221220a17cbecfeafc151454e975a72612a0d7fcb7fd3fe01ce17ff499ecc717fef87264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2193,
        "contract": "contracts/Battle.sol:Battle",
        "label": "avatarContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBGAvatars)2383"
      },
      {
        "astId": 2196,
        "contract": "contracts/Battle.sol:Battle",
        "label": "accountImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC6551Account)2417"
      },
      {
        "astId": 2199,
        "contract": "contracts/Battle.sol:Battle",
        "label": "registry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC6551Registry)2495"
      }
    ],
    "types": {
      "t_contract(IBGAvatars)2383": {
        "encoding": "inplace",
        "label": "contract IBGAvatars",
        "numberOfBytes": "20"
      },
      "t_contract(IERC6551Account)2417": {
        "encoding": "inplace",
        "label": "contract IERC6551Account",
        "numberOfBytes": "20"
      },
      "t_contract(IERC6551Registry)2495": {
        "encoding": "inplace",
        "label": "contract IERC6551Registry",
        "numberOfBytes": "20"
      }
    }
  }
}