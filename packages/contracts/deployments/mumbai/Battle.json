{
  "address": "0x1563A583C26095f0029E9d041f24d2Af2A4abEdE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId2",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "winner",
          "type": "uint256"
        }
      ],
      "name": "BattleCommenced",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "avatarContract",
      "outputs": [
        {
          "internalType": "contract IBGAvatars",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId2",
          "type": "uint256"
        }
      ],
      "name": "battle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_avatarContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa30e7e3785eefacd3a4a6ef67d84466ed190cebdd0e61b8a99b9ad54125635e1",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x1563A583C26095f0029E9d041f24d2Af2A4abEdE",
    "transactionIndex": 3,
    "gasUsed": "378119",
    "logsBloom": "0x
    "blockHash": "0xa441f961f5c8d19021604a8f0b42cbd902d25446729dff1aaf2e64a88c36fbbf",
    "transactionHash": "0xa30e7e3785eefacd3a4a6ef67d84466ed190cebdd0e61b8a99b9ad54125635e1",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 40751192,
        "transactionHash": "0xa30e7e3785eefacd3a4a6ef67d84466ed190cebdd0e61b8a99b9ad54125635e1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000096747d4beaa0000000000000000000000000000000000000000000000000f90e1129c3e8c4b7b000000000000000000000000000000000000000000001319822e44af68b136a900000000000000000000000000000000000000000000000f90d7ab5469cda17b0000000000000000000000000000000000000000000013198237abf73d6fe0a9",
        "logIndex": 8,
        "blockHash": "0xa441f961f5c8d19021604a8f0b42cbd902d25446729dff1aaf2e64a88c36fbbf"
      }
    ],
    "blockNumber": 40751192,
    "cumulativeGasUsed": "617540",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2db2f00a639aa9f2214b753896e4b713",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"}],\"name\":\"BattleCommenced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"avatarContract\",\"outputs\":[{\"internalType\":\"contract IBGAvatars\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"}],\"name\":\"battle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_avatarContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Battle.sol\":\"Battle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Battle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './interfaces/IBGAvatars.sol';\\n\\ncontract Battle {\\n    IBGAvatars public avatarContract;\\n\\n    event BattleCommenced(\\n        uint256 indexed tokenId1,\\n        uint256 indexed tokenId2,\\n        uint256 indexed winner\\n    );\\n\\n    function initialize(address _avatarContract) external {\\n        avatarContract = IBGAvatars(_avatarContract);\\n    }\\n\\n    function battle(uint256 tokenId1, uint256 tokenId2) external {\\n        // generate two random different numbers\\n        uint256 player1Roll = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, tokenId1)\\n            )\\n        ) % 100;\\n\\n        uint256 player2Roll = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, tokenId2)\\n            )\\n        ) % 100;\\n\\n        if (player1Roll > player2Roll) {\\n            avatarContract.battleBurn(tokenId2);\\n            emit BattleCommenced(tokenId1, tokenId2, tokenId1);\\n        } else if (player1Roll < player2Roll) {\\n            avatarContract.battleBurn(tokenId1);\\n            emit BattleCommenced(tokenId1, tokenId2, tokenId2);\\n        } else {\\n            emit BattleCommenced(tokenId1, tokenId2, 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c03123f2ecf10d5fd90460e3844ce328aeb0447b18bcc9bcf420203cb3f7917\",\"license\":\"MIT\"},\"contracts/interfaces/IBGAvatars.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface IBGAvatars is IERC721 {\\n    function getOwnedTokens(\\n        address owner\\n    ) external view returns (uint256[] memory);\\n\\n    function battleBurn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xf11f7dd2c6ec07f37881a58efa4ba20b6a8902bc1b0f365a00bf0c331807381b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105e3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632a0c52211461004657806345f0791d14610062578063c4d66de814610080575b600080fd5b610060600480360381019061005b9190610380565b61009c565b005b61006a6102de565b604051610077919061043f565b60405180910390f35b61009a60048036038101906100959190610498565b610302565b005b600060644244856040516020016100b5939291906104e6565b6040516020818303038152906040528051906020012060001c6100d89190610552565b9050600060644244856040516020016100f3939291906104e6565b6040516020818303038152906040528051906020012060001c6101169190610552565b9050808211156101df5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ae6aff846040518263ffffffff1660e01b81526004016101799190610592565b600060405180830381600087803b15801561019357600080fd5b505af11580156101a7573d6000803e3d6000fd5b505050508383857f33515132930854e3a6ed49dc7eb3159be8d1c21905ebcbc6ab9ae972e728885960405160405180910390a46102d8565b808210156102a65760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ae6aff856040518263ffffffff1660e01b81526004016102409190610592565b600060405180830381600087803b15801561025a57600080fd5b505af115801561026e573d6000803e3d6000fd5b505050508283857f33515132930854e3a6ed49dc7eb3159be8d1c21905ebcbc6ab9ae972e728885960405160405180910390a46102d7565b600083857f33515132930854e3a6ed49dc7eb3159be8d1c21905ebcbc6ab9ae972e728885960405160405180910390a45b5b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b6000819050919050565b61035d8161034a565b811461036857600080fd5b50565b60008135905061037a81610354565b92915050565b6000806040838503121561039757610396610345565b5b60006103a58582860161036b565b92505060206103b68582860161036b565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006104056104006103fb846103c0565b6103e0565b6103c0565b9050919050565b6000610417826103ea565b9050919050565b60006104298261040c565b9050919050565b6104398161041e565b82525050565b60006020820190506104546000830184610430565b92915050565b6000610465826103c0565b9050919050565b6104758161045a565b811461048057600080fd5b50565b6000813590506104928161046c565b92915050565b6000602082840312156104ae576104ad610345565b5b60006104bc84828501610483565b91505092915050565b6000819050919050565b6104e06104db8261034a565b6104c5565b82525050565b60006104f282866104cf565b60208201915061050282856104cf565b60208201915061051282846104cf565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061055d8261034a565b91506105688361034a565b92508261057857610577610523565b5b828206905092915050565b61058c8161034a565b82525050565b60006020820190506105a76000830184610583565b9291505056fea2646970667358221220251053daf6582318a3439658745ea7800b081ffcf98a88c8b6da3291c78d27b764736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632a0c52211461004657806345f0791d14610062578063c4d66de814610080575b600080fd5b610060600480360381019061005b9190610380565b61009c565b005b61006a6102de565b604051610077919061043f565b60405180910390f35b61009a60048036038101906100959190610498565b610302565b005b600060644244856040516020016100b5939291906104e6565b6040516020818303038152906040528051906020012060001c6100d89190610552565b9050600060644244856040516020016100f3939291906104e6565b6040516020818303038152906040528051906020012060001c6101169190610552565b9050808211156101df5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ae6aff846040518263ffffffff1660e01b81526004016101799190610592565b600060405180830381600087803b15801561019357600080fd5b505af11580156101a7573d6000803e3d6000fd5b505050508383857f33515132930854e3a6ed49dc7eb3159be8d1c21905ebcbc6ab9ae972e728885960405160405180910390a46102d8565b808210156102a65760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ae6aff856040518263ffffffff1660e01b81526004016102409190610592565b600060405180830381600087803b15801561025a57600080fd5b505af115801561026e573d6000803e3d6000fd5b505050508283857f33515132930854e3a6ed49dc7eb3159be8d1c21905ebcbc6ab9ae972e728885960405160405180910390a46102d7565b600083857f33515132930854e3a6ed49dc7eb3159be8d1c21905ebcbc6ab9ae972e728885960405160405180910390a45b5b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b6000819050919050565b61035d8161034a565b811461036857600080fd5b50565b60008135905061037a81610354565b92915050565b6000806040838503121561039757610396610345565b5b60006103a58582860161036b565b92505060206103b68582860161036b565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006104056104006103fb846103c0565b6103e0565b6103c0565b9050919050565b6000610417826103ea565b9050919050565b60006104298261040c565b9050919050565b6104398161041e565b82525050565b60006020820190506104546000830184610430565b92915050565b6000610465826103c0565b9050919050565b6104758161045a565b811461048057600080fd5b50565b6000813590506104928161046c565b92915050565b6000602082840312156104ae576104ad610345565b5b60006104bc84828501610483565b91505092915050565b6000819050919050565b6104e06104db8261034a565b6104c5565b82525050565b60006104f282866104cf565b60208201915061050282856104cf565b60208201915061051282846104cf565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061055d8261034a565b91506105688361034a565b92508261057857610577610523565b5b828206905092915050565b61058c8161034a565b82525050565b60006020820190506105a76000830184610583565b9291505056fea2646970667358221220251053daf6582318a3439658745ea7800b081ffcf98a88c8b6da3291c78d27b764736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4827,
        "contract": "contracts/Battle.sol:Battle",
        "label": "avatarContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBGAvatars)4952"
      }
    ],
    "types": {
      "t_contract(IBGAvatars)4952": {
        "encoding": "inplace",
        "label": "contract IBGAvatars",
        "numberOfBytes": "20"
      }
    }
  }
}